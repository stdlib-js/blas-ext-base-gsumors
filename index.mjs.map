{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/accessors.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\nvar M = 6;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumors( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumors( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar m;\n\tvar s;\n\tvar o;\n\tvar i;\n\n\ts = 0.0;\n\tif ( N <= 0 ) {\n\t\treturn s;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\n\t// If the stride is equal to `1`, use unrolled loops...\n\tif ( strideX === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\ts += x[ ix ];\n\t\t\t\tix += strideX;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn s;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\ts += x[ix] + x[ix+1] + x[ix+2] + x[ix+3] + x[ix+4] + x[ix+5];\n\t\t\tix += M;\n\t\t}\n\t\treturn s;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += x[ ix ];\n\t\tix += strideX;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gsumors( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gsumors( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * get( xbuf, ix );\n\t}\n\ts = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ts += get( xbuf, ix );\n\t\tix += strideX;\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumors( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsumors( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsumors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using ordinary recursive summation.\n*\n* @module @stdlib/blas-ext-base-gsumors\n*\n* @example\n* import gsumors from '@stdlib/blas-ext-base-gsumors';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumors( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsumors from '@stdlib/blas-ext-base-gsumors';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumors.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["M","gsumors","N","x","strideX","offsetX","ix","m","s","o","i","arraylike2object","accessorProtocol","xbuf","get","data","accessors","ndarray","stride2offset","setReadOnly","main"],"mappings":";;mUA4BA,IAAIA,EAAI,EAoBR,SAASC,EAASC,EAAGC,EAAGC,EAASC,GAChC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAF,EAAI,EACCN,GAAK,EACT,OAAOM,EAGR,IADAC,EAAIE,EAAkBR,IACfS,iBACN,OClBF,SAAkBV,EAAGC,EAAGC,EAASC,GAChC,IAAIQ,EACAC,EACAR,EACAE,EACAE,EASJ,GANAG,EAAOV,EAAEY,KAGTD,EAAMX,EAAEa,UAAW,GAEnBV,EAAKD,EACY,IAAZD,EACJ,OAAOF,EAAIY,EAAKD,EAAMP,GAGvB,IADAE,EAAI,EACEE,EAAI,EAAGA,EAAIR,EAAGQ,IACnBF,GAAKM,EAAKD,EAAMP,GAChBA,GAAMF,EAEP,OAAOI,CACR,CDLSQ,CAAWd,EAAGO,EAAGL,EAASC,GAGlC,GADAC,EAAKD,EACY,IAAZD,EACJ,OAAOF,EAAIC,EAAGG,GAIf,GAAiB,IAAZF,EAAgB,CAIpB,IAHAG,EAAIL,EAAIF,GAGC,EACR,IAAMU,EAAI,EAAGA,EAAIH,EAAGG,IACnBF,GAAKL,EAAGG,GACRA,GAAMF,EAGR,GAAKF,EAAIF,EACR,OAAOQ,EAER,IAAME,EAAIH,EAAGG,EAAIR,EAAGQ,GAAKV,EACxBQ,GAAKL,EAAEG,GAAMH,EAAEG,EAAG,GAAKH,EAAEG,EAAG,GAAKH,EAAEG,EAAG,GAAKH,EAAEG,EAAG,GAAKH,EAAEG,EAAG,GAC1DA,GAAMN,EAEP,OAAOQ,CACP,CACD,IAAME,EAAI,EAAGA,EAAIR,EAAGQ,IACnBF,GAAKL,EAAGG,GACRA,GAAMF,EAEP,OAAOI,CACR,CEnDA,SAASP,EAASC,EAAGC,EAAGC,GACvB,OAAOa,EAASf,EAAGC,EAAGC,EAASc,EAAehB,EAAGE,GAClD,CCOAe,EAAAC,EAAA,UAAAH"}